
package server;

import javax.jws.WebMethod;
import javax.jws.WebParam;
import javax.jws.WebService;
import javax.xml.bind.annotation.XmlSeeAlso;
import javax.xml.ws.Action;
import javax.xml.ws.FaultAction;
import javax.xml.ws.RequestWrapper;
import javax.xml.ws.ResponseWrapper;


/**
 * This class was generated by the JAX-WS RI.
 * JAX-WS RI 2.2.11-b150120.1832
 * Generated source version: 2.2
 * 
 */
@WebService(name = "Cadastros", targetNamespace = "http://server/")
@XmlSeeAlso({
    ObjectFactory.class
})
public interface Cadastros {


    /**
     * 
     * @param preco
     * @param eventoId
     * @param lugarFinal
     * @param lugarInicial
     * @throws DatabaseErrorException_Exception
     */
    @WebMethod
    @RequestWrapper(localName = "atribuiPrecoLugar", targetNamespace = "http://server/", className = "server.AtribuiPrecoLugar")
    @ResponseWrapper(localName = "atribuiPrecoLugarResponse", targetNamespace = "http://server/", className = "server.AtribuiPrecoLugarResponse")
    @Action(input = "http://server/Cadastros/atribuiPrecoLugarRequest", output = "http://server/Cadastros/atribuiPrecoLugarResponse", fault = {
        @FaultAction(className = DatabaseErrorException_Exception.class, value = "http://server/Cadastros/atribuiPrecoLugar/Fault/DatabaseErrorException")
    })
    public void atribuiPrecoLugar(
        @WebParam(name = "eventoId", targetNamespace = "")
        Integer eventoId,
        @WebParam(name = "lugarInicial", targetNamespace = "")
        Integer lugarInicial,
        @WebParam(name = "lugarFinal", targetNamespace = "")
        Integer lugarFinal,
        @WebParam(name = "preco", targetNamespace = "")
        Double preco)
        throws DatabaseErrorException_Exception
    ;

    /**
     * 
     * @param data
     * @param inicioVendas
     * @param nome
     * @param fimVendas
     * @param lugares
     * @param local
     * @throws DateErrorException_Exception
     * @throws DatabaseErrorException_Exception
     * @throws PersonNotFoundException_Exception
     * @throws UserAuthenticationException_Exception
     */
    @WebMethod
    @RequestWrapper(localName = "incluiEvento", targetNamespace = "http://server/", className = "server.IncluiEvento")
    @ResponseWrapper(localName = "incluiEventoResponse", targetNamespace = "http://server/", className = "server.IncluiEventoResponse")
    @Action(input = "http://server/Cadastros/incluiEventoRequest", output = "http://server/Cadastros/incluiEventoResponse", fault = {
        @FaultAction(className = PersonNotFoundException_Exception.class, value = "http://server/Cadastros/incluiEvento/Fault/PersonNotFoundException"),
        @FaultAction(className = DatabaseErrorException_Exception.class, value = "http://server/Cadastros/incluiEvento/Fault/DatabaseErrorException"),
        @FaultAction(className = UserAuthenticationException_Exception.class, value = "http://server/Cadastros/incluiEvento/Fault/UserAuthenticationException"),
        @FaultAction(className = DateErrorException_Exception.class, value = "http://server/Cadastros/incluiEvento/Fault/DateErrorException")
    })
    public void incluiEvento(
        @WebParam(name = "nome", targetNamespace = "")
        String nome,
        @WebParam(name = "data", targetNamespace = "")
        String data,
        @WebParam(name = "local", targetNamespace = "")
        String local,
        @WebParam(name = "lugares", targetNamespace = "")
        int lugares,
        @WebParam(name = "inicioVendas", targetNamespace = "")
        String inicioVendas,
        @WebParam(name = "fimVendas", targetNamespace = "")
        String fimVendas)
        throws DatabaseErrorException_Exception, DateErrorException_Exception, PersonNotFoundException_Exception, UserAuthenticationException_Exception
    ;

}
